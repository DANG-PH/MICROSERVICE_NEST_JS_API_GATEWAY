import { Module } from '@nestjs/common';
import { HttpModule } from '@nestjs/axios';
import { AppController } from './app.controller';
import { GrpcController } from './grpc.controller';
import { ClientsModule, Transport } from '@nestjs/microservices';
import { join } from 'path';
import { USER_PACKAGE_NAME } from 'proto/user.pb';
import { AppService } from './app.service';
import { JwtStrategy } from './jwt.strategy';
import { JwtAuthGuard } from './jwt-auth.guard';
import { MiddlewareConsumer, NestModule } from '@nestjs/common';
import { LoggerMiddleware } from './logger.middleware';
import { ConfigModule } from '@nestjs/config';

@Module({
  imports: [
    HttpModule,
    ConfigModule.forRoot({
      isGlobal: true,
      envFilePath: process.env.NODE_ENV === 'development' ? '.env.local' : '.env',
    }),
    ClientsModule.register([
      {
        name: USER_PACKAGE_NAME,
        transport: Transport.GRPC,
        options: {
          package: USER_PACKAGE_NAME,
          protoPath: join(process.cwd(), 'proto/user.proto'),
          url: process.env.USER_SERVICE_GRPC_URL
        },
      },
    ]),
  ],
  controllers: [GrpcController],
  providers: [AppService,JwtStrategy]
})
export class AppModule implements NestModule {
  configure(consumer: MiddlewareConsumer) {
    consumer.apply(LoggerMiddleware).forRoutes(GrpcController);
  }
}

//comment
/*
‚öôÔ∏è V√¨ sao Interceptor ·ªü main.ts, c√≤n Middleware ·ªü AppModule?

üü© Middleware (·ªü c·∫•p Express, ch·∫°y tr∆∞·ªõc khi v√†o Nest):
Middleware ho·∫°t ƒë·ªông ·ªü t·∫ßng HTTP th·∫•p nh·∫•t (Express/Fastify).
Nest kh√¥ng th·ªÉ d√πng app.useGlobalMiddleware() v√¨ kh√¥ng c√≥ h√†m ƒë√≥,
n√™n b·∫Øt bu·ªôc ph·∫£i khai b√°o ·ªü AppModule, n∆°i Nest √°nh x·∫° route v·ªõi Express.

üü¶ Interceptor (·ªü c·∫•p NestJS, ch·∫°y trong Nest):
Interceptor ho·∫°t ƒë·ªông sau khi request ƒë√£ ƒëi qua middleware, guard, pipe
v√† tr∆∞·ªõc khi controller x·ª≠ l√Ω ho·∫∑c sau khi controller tr·∫£ v·ªÅ d·ªØ li·ªáu.
*/

/*
Khi vi·∫øt:
export class AppModule implements NestModule
th√¨ m√¨nh ƒëang n√≥i v·ªõi Nest r·∫±ng:
‚ÄúModule n√†y c√≥ s·ª≠ d·ª•ng middleware, 
v√† anh (Nest) h√£y g·ªçi h√†m configure() c·ªßa t√¥i khi kh·ªüi ƒë·ªông app nh√©.‚Äù
*/
